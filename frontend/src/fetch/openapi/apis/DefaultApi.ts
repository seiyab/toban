/* tslint:disable */
/* eslint-disable */
/**
 * toban API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Assignment,
    AssignmentFromJSON,
    AssignmentToJSON,
    Member,
    MemberFromJSON,
    MemberToJSON,
    New,
    NewFromJSON,
    NewToJSON,
    NewMember,
    NewMemberFromJSON,
    NewMemberToJSON,
    NewRole,
    NewRoleFromJSON,
    NewRoleToJSON,
    Role,
    RoleFromJSON,
    RoleToJSON,
} from '../models';

export interface GetAssignmentsRequest {
    from: Date;
    to: Date;
}

export interface GetMembersMemberIdRequest {
    memberId: number;
}

export interface GetRolesRoleIdRequest {
    roleId: number;
}

export interface PostMembersRequest {
    newMember?: NewMember;
}

export interface PostRolesRequest {
    newRole?: NewRole;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * get assignments
     */
    async getAssignmentsRaw(requestParameters: GetAssignmentsRequest): Promise<runtime.ApiResponse<Array<Assignment>>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getAssignments.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString().substr(0,10);
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssignmentFromJSON));
    }

    /**
     * get assignments
     */
    async getAssignments(requestParameters: GetAssignmentsRequest): Promise<Array<Assignment>> {
        const response = await this.getAssignmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get members
     */
    async getMembersRaw(): Promise<runtime.ApiResponse<Array<Member>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberFromJSON));
    }

    /**
     * get members
     */
    async getMembers(): Promise<Array<Member>> {
        const response = await this.getMembersRaw();
        return await response.value();
    }

    /**
     * get a member
     */
    async getMembersMemberIdRaw(requestParameters: GetMembersMemberIdRequest): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getMembersMemberId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{member_id}`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * get a member
     */
    async getMembersMemberId(requestParameters: GetMembersMemberIdRequest): Promise<Member> {
        const response = await this.getMembersMemberIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roles
     */
    async getRolesRaw(): Promise<runtime.ApiResponse<Array<Role>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * get roles
     */
    async getRoles(): Promise<Array<Role>> {
        const response = await this.getRolesRaw();
        return await response.value();
    }

    /**
     * get a role
     */
    async getRolesRoleIdRaw(requestParameters: GetRolesRoleIdRequest): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getRolesRoleId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * get a role
     */
    async getRolesRoleId(requestParameters: GetRolesRoleIdRequest): Promise<Role> {
        const response = await this.getRolesRoleIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * post a new member
     */
    async postMembersRaw(requestParameters: PostMembersRequest): Promise<runtime.ApiResponse<New>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewMemberToJSON(requestParameters.newMember),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewFromJSON(jsonValue));
    }

    /**
     * post a new member
     */
    async postMembers(requestParameters: PostMembersRequest): Promise<New> {
        const response = await this.postMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * post a new member
     */
    async postRolesRaw(requestParameters: PostRolesRequest): Promise<runtime.ApiResponse<New>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleToJSON(requestParameters.newRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewFromJSON(jsonValue));
    }

    /**
     * post a new member
     */
    async postRoles(requestParameters: PostRolesRequest): Promise<New> {
        const response = await this.postRolesRaw(requestParameters);
        return await response.value();
    }

}
